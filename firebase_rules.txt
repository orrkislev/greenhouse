rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function getUsername() {
      return request.auth.token.email.split('@')[0];
    }

    function getUser() {
      let username = getUsername();
      return get(/databases/$(database)/documents/users/$(username)).data;
    }

    function hasRole(role) {
      let userData = getUser();
      return userData.roles != null && userData.roles.hasAny([role]);
    }

    function isSelf(username) {
      return getUsername() == username;
    }

    match /users/{username} {
      allow read;

      allow update: if hasRole("admin") || (
        isSelf(username) &&
        request.resource.data.roles == resource.data.roles
      );

      allow create: if hasRole("admin") || isSelf(username);
      
      allow delete: if hasRole("admin");

			match /{document=**} {
        allow read, write: if hasRole("admin") || isSelf(username);
      }
    }

    function isGroupAdmin(groupName) {
      let username = request.auth.token.email.split('@')[0];
      let groupDoc = get(/databases/$(database)/documents/groups/$(groupName));
      return groupDoc.data.admins != null && groupDoc.data.admins.hasAny([username]);
    }

    match /groups/{groupName} {
      allow read: if true;
      allow create, update, delete: if true;

      match /entries/{dateString} {
        allow read: if true;
        allow create, delete: if hasRole("admin") || isGroupAdmin(groupName);

        // Allow users to add/remove their own userId to 'members' field
        allow update: if hasRole("admin") || isGroupAdmin(groupName) || (
          request.resource.data.keys().hasOnly(['members']) && 
          (
            // Adding themselves: new list has them, old list doesn't
            (request.resource.data.members.hasAny([getUsername()]) && !resource.data.members.hasAny([getUsername()])) ||
            // Removing themselves: old list has them, new list doesn't  
            (!request.resource.data.members.hasAny([getUsername()]) && resource.data.members.hasAny([getUsername()]))
          ) &&
          // Ensure the difference between old and new is exactly one user (themselves)
          request.resource.data.members.toSet().difference(resource.data.members.toSet()).size() <= 1 &&
          resource.data.members.toSet().difference(request.resource.data.members.toSet()).size() <= 1
        );
      }
    }



    // Allow anyone to read all other documents/collections, writable only by admins
    match /{document=**} {
      allow read: if true;
      allow write: if hasRole("admin");
    }
  }
}
